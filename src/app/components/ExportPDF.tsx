"use client";

import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { useState } from 'react';

interface Slide {
  title: string;
  text?: string;
  bullets?: string[];
}

interface ExportPDFProps {
  slides: Slide[];
  theme: string;
}

export default function ExportPDF({ slides, theme }: ExportPDFProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [exportSuccess, setExportSuccess] = useState(false);

  async function handleExport() {
    setIsExporting(true);
    setExportSuccess(false);
    
    try {
      const pdfDoc = await PDFDocument.create();
      const font = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
      const regularFont = await pdfDoc.embedFont(StandardFonts.Helvetica);
      
      slides.forEach((slide, slideIndex) => {
        const page = pdfDoc.addPage([800, 600]);
        const { width, height } = page.getSize();
        
        // Theme colors
        const bgColor = theme === 'modern' 
          ? rgb(1, 1, 1) 
          : theme === 'classic' 
          ? rgb(0.97, 0.96, 0.91) 
          : rgb(0.05, 0.05, 0.05);
          
        const textColor = theme === 'bold' 
          ? rgb(1, 1, 1) 
          : rgb(0.1, 0.1, 0.1);
          
        const accentColor = theme === 'modern'
          ? rgb(0.23, 0.51, 0.96)
          : theme === 'classic'
          ? rgb(0.65, 0.47, 0.25)
          : rgb(0.23, 0.51, 0.96);

        // Background
        page.drawRectangle({ 
          x: 0, 
          y: 0, 
          width, 
          height, 
          color: bgColor 
        });

        // Header accent bar
        page.drawRectangle({
          x: 0,
          y: height - 10,
          width,
          height: 10,
          color: accentColor
        });

        // Slide number
        page.drawText(`${slideIndex + 1}`, {
          x: width - 60,
          y: height - 40,
          size: 14,
          font: regularFont,
          color: textColor,
          opacity: 0.6
        });

        // Title (remove emojis to prevent encoding issues)
        const cleanTitle = slide.title.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '');
        const titleLines = cleanTitle.length > 50 
          ? [cleanTitle.substring(0, 50), cleanTitle.substring(50)]
          : [cleanTitle];
          
        titleLines.forEach((line, i) => {
          if (line.trim()) {
            page.drawText(line.trim(), {
              x: 60,
              y: height - 100 - (i * 45),
              size: 32,
              font,
              color: textColor,
            });
          }
        });

        let currentY = height - 180 - (titleLines.length > 1 ? 45 : 0);

        // Content text (remove emojis)
        if (slide.text) {
          const cleanText = slide.text.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '');
          const textLines = cleanText.match(/.{1,80}(\s|$)/g) || [cleanText];
          textLines.forEach((line, i) => {
            if (line.trim()) {
              page.drawText(line.trim(), {
                x: 60,
                y: currentY - (i * 25),
                size: 16,
                font: regularFont,
                color: textColor,
              });
            }
          });
          currentY -= textLines.length * 25 + 20;
        }

        // Bullets (remove emojis)
        if (slide.bullets) {
          slide.bullets.forEach((bullet, i) => {
            // Bullet point
            page.drawCircle({
              x: 70,
              y: currentY - (i * 30) - 5,
              size: 3,
              color: accentColor,
            });
            
            // Bullet text
            const cleanBullet = bullet.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '');
            const bulletLines = cleanBullet.match(/.{1,70}(\s|$)/g) || [cleanBullet];
            bulletLines.forEach((line, lineIndex) => {
              if (line.trim()) {
                page.drawText(line.trim(), {
                  x: 85,
                  y: currentY - (i * 30) - (lineIndex * 20),
                  size: 14,
                  font: regularFont,
                  color: textColor,
                });
              }
            });
          });
        }

        // Footer
        page.drawText('Generated by okbutpitchit', {
          x: 60,
          y: 30,
          size: 10,
          font: regularFont,
          color: textColor,
          opacity: 0.5
        });
      });

      const pdfBytes = await pdfDoc.save();
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'okbutpitchit-deck.pdf';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setExportSuccess(true);
      setTimeout(() => setExportSuccess(false), 3000);
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
    }
  }

  return (
    <button
      onClick={handleExport}
      disabled={isExporting}
      className={`group relative overflow-hidden font-bold py-4 px-8 rounded-2xl text-lg transition-all duration-300 shadow-xl hover:shadow-2xl hover:scale-105 ${
        exportSuccess
          ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white'
          : isExporting
          ? 'bg-neutral-400 text-neutral-600 cursor-not-allowed'
          : 'bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white'
      }`}
    >
      <div className="flex items-center gap-3">
        {exportSuccess ? (
          <>
            <span className="text-xl">âœ“</span>
            <span>PDF Downloaded!</span>
          </>
        ) : isExporting ? (
          <>
            <div className="w-5 h-5 border-2 border-neutral-600 border-t-transparent rounded-full animate-spin"></div>
            <span>Generating PDF...</span>
          </>
        ) : (
          <>
            <span className="text-xl">ðŸ“„</span>
            <span>Export as PDF</span>
            <span className="ml-1 group-hover:translate-x-1 transition-transform duration-200">â†’</span>
          </>
        )}
      </div>
      
      {/* Shine effect */}
      {!isExporting && !exportSuccess && (
        <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 group-hover:animate-pulse transition-opacity duration-300"></div>
      )}
    </button>
  );
} 